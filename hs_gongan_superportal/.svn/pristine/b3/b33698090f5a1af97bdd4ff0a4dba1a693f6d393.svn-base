package com.mininglamp.util;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;

public class ExcelUtil {

	public static ArrayList<ArrayList<String>> readExcel(MultipartFile excelFile) {
		 String fileName  = excelFile.getOriginalFilename();

		if (fileName.endsWith(".xls")) {
			return readXlsFile(excelFile);
		}
		if (fileName.endsWith(".xlsx")) {
			return readXlsxFile(excelFile);
		}
		return null;
	}
	
	private static ArrayList<ArrayList<String>> readXlsxFile(MultipartFile excelFile) {
		 ArrayList<ArrayList<String>> list = new ArrayList<ArrayList<String>>();
			try {
				InputStream inputStream = excelFile.getInputStream();
				XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
				// XSSFWorkbook workbook = new XSSFWorkbook(fs);

				XSSFSheet sheet = workbook.getSheetAt(0);
				int rowNum = sheet.getLastRowNum();// 行
				int cellNum;

				XSSFRow row;
				XSSFCell cell;
				String value = "";

				for (int i = 0; i <= rowNum; i++) {
					row = sheet.getRow(i);
					cellNum = row.getLastCellNum();// 列
					ArrayList<String>subList = new ArrayList<>();
					for (int j = 0; j < cellNum; j++) {// 对一行的每个列进行解析
						
						
						cell = row.getCell(j);
						// cell.setEncoding(HSSFCell.ENCODING_UTF_16);
//						value = cell.getStringCellValue().trim();// 字符型的值
						switch (cell.getCellType()) {
							case XSSFCell.CELL_TYPE_NUMERIC:
								if(DateUtil.isCellDateFormatted( cell)){
									SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
									value = sdf.format(DateUtil.getJavaDate(cell.getNumericCellValue())).toString();
								}else{
									value = String.valueOf((int)cell.getNumericCellValue());
								} 
								break;
							case XSSFCell.CELL_TYPE_STRING:
								value = cell.getRichStringCellValue().getString();
								 break;
							case XSSFCell.CELL_TYPE_FORMULA:
								value = cell.getCellFormula();
								 break;
						}
						subList.add(value);
						System.out.print(value+"  ");
					}
					list.add(subList);
					System.out.println();
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
			//移除第二行
//			list.remove(1);
			return list;
		
	}
	private static ArrayList<ArrayList<String>> readXlsFile(MultipartFile excelFile) {
		 ArrayList<ArrayList<String>> list = new ArrayList<ArrayList<String>>();
			try {
				InputStream inputStream = excelFile.getInputStream();
				HSSFWorkbook workbook = new HSSFWorkbook(inputStream);

				HSSFSheet sheet = workbook.getSheetAt(0);
				int rowNum = sheet.getLastRowNum();// 行
				int cellNum;

				HSSFRow row;
				HSSFCell cell;
				String value = "";

				for (int i = 0; i <= rowNum; i++) {
					row = sheet.getRow(i);
					cellNum = row.getLastCellNum();// 列

					ArrayList<String> subList = null ;
					for (int j = 0; j < cellNum; j++) {// 对一行的每个列进行解析
						subList = new ArrayList<>();
						cell = row.getCell(j);
						// cell.setEncoding(HSSFCell.ENCODING_UTF_16);
						switch (cell.getCellType()) {
							case HSSFCell.CELL_TYPE_NUMERIC:
								if(HSSFDateUtil.isCellDateFormatted(cell)){
									SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
									value = sdf.format(HSSFDateUtil.getJavaDate(cell.getNumericCellValue())).toString();
								}else{
									value = String.valueOf(cell.getNumericCellValue());
								}
								
								break;
							case HSSFCell.CELL_TYPE_STRING:
								value = cell.getRichStringCellValue().getString();
								break;
							case HSSFCell.CELL_TYPE_FORMULA:
								value = cell.getCellFormula();
								break;
						}
//						value = cell.getStringCellValue().trim();// 字符型的值
						subList.add(value);
					}
					list.add(subList);
				}
				
			} catch (Exception e) {
				e.printStackTrace();
			}
//			//移除第二行
//			list.remove(1);
			return list;
	}

	
	
	
	/**
	 *获得表名
	 * @param excelFile
	 * @return
	 */
	public static String getTableName(MultipartFile excelFile) {
		String fileName = excelFile.getOriginalFilename();
		fileName = fileName.substring(fileName.lastIndexOf("-") + 1, fileName.lastIndexOf("."));
		if (fileName.indexOf("(") != -1) {
			fileName = fileName.substring(0, fileName.lastIndexOf("("));
		}
		return fileName.trim();
	}

}
